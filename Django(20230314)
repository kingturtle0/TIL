# Django

## Framework 이해

- 누군가 만들어 놓은 코드를 재사용하는 것은 이미 익숙한 개발 문화
- 자주 사용되는 부분들을 재사용할 수 있게 좋은 구조의 코드로 만들어져 있다.
- 그러한 코드들을 모아 놓은 것, ****즉 서비스 개발에 필요한 기능들을 미리 구현해서 모아 놓은 것 = 프레임워크****
- “소프트웨어 프레임워크”는 복잡한 문제를 해결하거나 서술하는 데 사용되는 기본 개념 구조
- 소프트웨어의 생산성과 품질을 높인다.

## 클라이언트와 서버

### 클라이언트-서버 구조

- 오늘날 우리가 사용하는 대부분의 웹 서비스는 클라이언트-서버 구조를 기반으로 동작
- 클라이언트와 서버 역시 하나의 컴퓨터이다. 클라이언트는 서버에 요청(requests)하고 서브는 클라이언트에 응답(response)하는 상호작용을 한다.
- 클라이언트
    - 웹 사용자의 인터넷에 연결된 장치(ex. wi-fi에 연결된 컴퓨터 또는 모바일)
    - Chrome과 같은 웹 브라우저
    - **서비스를 요청하는 주체**
- 서버
    - 웹 페이지, 사이트 또는 앱을 저장하는 컴퓨터
    - 클라이언트가 웹 페이지에 접근하려고 할 때 서버에서 클라이언트 컴퓨터로 웹 페이지 데이터를 응답해 사용자의 웹 브라우저에 표시된다.
    - **요청에 대해 서비스를 응답하는 주체**
- 어떠한 자원(resource)를 달라고 요청(request)하는 쪽을 클라이언트라고 하고 자원을 제공해주는 쪽을 서버(server)라고 한다.

### 정리

- 우리가 사용하는 웹은 클라이언트-서버 구조로 이루어져 있다.
- Django는 서버를 구현하는 웹 프레임워크이다.

### Django Project

- 설치 : `pip install django==3.2.18`
- 프로젝트 생성 : `django-admin startproject [프로젝트 이름]`
- 서버 실행 : `python [manage.py](http://manage.py) runserver`
- 서버 실행 후 메인 페이지 확인 (ex. [http://127.0.0.1:8000/](http://127.0.0.1:8000/))

### 패키지와 가상환경

각각의 패키지를 하나의 환경에 담아야 한다면? ⇒ 가상환경!

<aside>
💡 **global에 설치하는 것보다는 가상환경을 많이 활용하자!**

</aside>

- 생성 : `python -m venv [venv 가상환경 이름 보통 venv 사용]`
- 활성화 : `source venv/Scripts/activate`
- 비활성화 : `deactivate`
- 가상환경 패키지 목록 저장 : `pip freeze > requirements.txt`
- 파일로부터 패키지 설치 : `pip install -r requirements.txt`

## 프로젝트와 앱

- 장고는 커다란 프로젝트 하나와 기능 단위의 여러 앱으로 이루어져 있다.

### 프로젝트 구조

- _ _init _ _.py
- asgi.py
- settings.py
    - Django 프로젝트 설정을 관리
- urls.py
    - 사이트의 url과 적절한 views의 연결을 지정
- wsgi.py
- manage.py
    - Django 프로젝트와 다양한 방법으로 상호작용하는 커맨드라인 유틸리티

### Django Application

- 앱 생성 : `python [manage.py](http://manage.py) startapp articles` 앱 이름은 복수형으로 작성 권장
앱(App) == 하나의 큰 기능 단위
정해진 규칙은 없으며 개발자가 판단해서 앱 생성
여러 개의 앱이 아닌 단일 앱으로 개발해도 괜찮다.

### 앱 구조

- [admin.py](http://admin.py)
    - 관리자용 페이지를 설정하는 곳
- apps.py
- models.py
    - 앱에서 사용하는 Model(데이터 구조)을 정의하는 곳
    - MTV패턴의 M에 해당
- tests.py
- view.py
    - 앱의 로직을 적는 곳. view 함수들이 정의 되는 곳
    - MTV패턴의 V에 해당

### 앱 등록

<aside>
💡 **앱을 사용하기 위해서는 반드시 INSTALLED_APPS 리스트에 앱을 추가해야한다.**

</aside>

### Project & Application

- Project
    - collection of apps, 프로젝트는 앱의 집합
    - 프로젝트에는 여러 앱이 포함될 수 있다.
    - 앱은 여러 프로젝트에 있을 수 있다.
- Application
    - 앱은 실제 요청을 처리하고 페이지를 보여주는 등의 역할을 담당
    - 앱은 하나의 역할 및 기능 단위로 작성하는 것을 권장한다.

## 요청과 응답

### Django의 세가지 구조, MTV

- Model
- View
- Template ⇒ html!

### URLs

- URL → VIEW → TEMPLATE 데이터 흐름 이해하기

### View

- 실행시킬 함수를 적는 곳
- 요청이 들어오면 HTML Page로 응답을 돌려준다.

### Templates

- 실제 내용을 보여주는데 사용되는 파일
- 파일의 구조나 레이아웃을 정의
- Template 파일의 기본 경로
    - app 폴더 안의 templates 폴더
    - **app_name/templates/app_name**

<aside>
💡 **템플릿 폴더 이름은 반드시 templates로 지정.
app_name/templates/app_name 위치에 html생성**

</aside>

### render()

`render(request, template_name, context)`

- 주어진 템플릿을 주어진 컨텍스트 데이터와 결합하고 렌더링된 텍스트와 함께 HttpResponse(응답) 객체를 반환하는 함수
1. request : 응답을 생성하는 데 사용되는 요청 객체
2. template_name : 템플릿의 전체 이름 또는 템플릿 이름의 경로
3. context : 템플릿에서 사용할 데이터 (딕셔너리 타입으로 작성)

### 코드 작성 순서

- 앞으로 Django에서의 코드 작성은 URL → View → Template순으로 작성(”데이터의 흐름 순서”)

```python
# settings
INSTALLED_APPS = []  # <= APP이름 추가
# URL
from APP_NAME import index
path('index/', views.index)
# View
def index(request):
    return render(request, 'index.html')
# Template 
# APP_NAME/templates/APP_NAME/index.html에 만들기
```
